CMAKE_MINIMUM_REQUIRED(VERSION 2.4)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)
PROJECT(antinject)

SET(BUILD_WITH_STATIC_CRT 1)
SET(BUILD_WITH_DEBUG_INFO 1)
if(MSVC)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
    ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
    if(BUILD_WITH_STATIC_CRT)
        foreach(flag_var
                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
           if(${flag_var} MATCHES "/MD")
              string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
           endif()
           if(${flag_var} MATCHES "/MDd")
              string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
           endif()
        endforeach(flag_var)
        
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:atlthunk.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:msvcrtd.lib")
        set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:libcmt.lib")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:libcmtd.lib")
    else(BUILD_WITH_STATIC_CRT)
        foreach(flag_var
                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
           if(${flag_var} MATCHES "/MT")
              string(REGEX REPLACE "/MT" "/MD" ${flag_var} "${${flag_var}}")
           endif()
           if(${flag_var} MATCHES "/MTd")
              string(REGEX REPLACE "/MTd" "/MDd" ${flag_var} "${${flag_var}}")
           endif()
        endforeach(flag_var)
    endif(BUILD_WITH_STATIC_CRT)

    if(NOT BUILD_WITH_DEBUG_INFO)
        string(REPLACE "/debug" "" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/debug" "" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/debug" "" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/Zi" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
        string(REPLACE "/Zi" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    endif()

endif(MSVC)  

#detours
SET(DETOURS_DIR ${CMAKE_SOURCE_DIR}/detours)
FIND_PACKAGE(DETOURS)
INCLUDE_DIRECTORIES(${DETOURS_INCLUDE_DIRS})

#struct
SET(STRUCT_DIR ${CMAKE_SOURCE_DIR}/struct)
FIND_PACKAGE(STRUCT)
INCLUDE_DIRECTORIES(${STRUCT_INCLUDE_DIRS})

#util
SET(UTIL_DIR ${CMAKE_SOURCE_DIR}/util)
FIND_PACKAGE(UTIL)
INCLUDE_DIRECTORIES(${UTIL_INCLUDE_DIRS})

#process
SET(PROCESS_DIR ${CMAKE_SOURCE_DIR}/process)
FIND_PACKAGE(PROCESS)
INCLUDE_DIRECTORIES(${PROCESS_INCLUDE_DIRS})

#avsst
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/avsst/include)
LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/avsst/lib)

#anti-inject防护系统DLL
SET(SRC_LIST 
antinject.cpp
antinject.def)
ADD_LIBRARY(antinject SHARED ${SRC_LIST})
SET_TARGET_PROPERTIES(antinject PROPERTIES OUTPUT_NAME "antinject")
SET_TARGET_PROPERTIES(antinject PROPERTIES CLEAN_DIRECT_OUTPUT 1)
TARGET_LINK_LIBRARIES(antinject detours)
TARGET_LINK_LIBRARIES(antinject avsst)
INSTALL(TARGETS antinject ARCHIVE DESTINATION lib)
INSTALL(TARGETS antinject RUNTIME DESTINATION bin)
INSTALL(FILES antinject.h DESTINATION include)

#anti-inject防护系统demo程序
SET(TOOL_SRC_LIST test_anti.cpp)
ADD_EXECUTABLE(test_antinject ${TOOL_SRC_LIST})
TARGET_LINK_LIBRARIES(test_antinject antinject)
ADD_DEPENDENCIES(test_antinject antinject)
INSTALL(TARGETS test_antinject RUNTIME DESTINATION bin)

#模块注入模拟攻击程序
SET(INJECT_SRC_LIST test_inject.cpp)
ADD_EXECUTABLE(test_inject ${INJECT_SRC_LIST})
TARGET_LINK_LIBRARIES(test_inject process)
ADD_DEPENDENCIES(test_inject process)
INSTALL(TARGETS test_inject RUNTIME DESTINATION bin)

#模拟被注入的恶意模块
SET(INJECTDLL_SRC_LIST test_dll.cpp)
ADD_LIBRARY(test_dll SHARED ${INJECTDLL_SRC_LIST})
INSTALL(TARGETS test_dll RUNTIME DESTINATION bin)

#处理debug版本的mainfest问题
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
INSTALL(FILES debugcrt/x86/Microsoft.VC90.DebugCRT.manifest DESTINATION bin)
INSTALL(FILES debugcrt/x86/msvcr90d.dll DESTINATION bin)
INSTALL(FILES debugcrt/x86/msvcp90d.dll DESTINATION bin)
ENDIF()

INSTALL(DIRECTORY avsst/db DESTINATION bin)







